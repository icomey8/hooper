hooper {
    Program             = Stmt*
    Stmt                = VarDec
                        | FunctionDec                       
                        | PrintStmt
                        | AssignmentStmt
                        | IfStmt
                        | WhileStmt
                        | break ";"                                         --break  
                        | IncrementStmt
                        | dunk Exp? ";"                                     --dunk
      
    VarDec              = (pick | const) id ":" Type "=" Exp ";"            --withtype
                        | (pick | const) id "=" Exp ";"                     --inference
    FunctionDec         = defineplay id Params ("->" Type)? Block
    Params              = "(" ListOf<Param, ","> ")"
    Param               = id ":" Type

    PrintStmt           = log Exp ";"                   
    AssignmentStmt      = (Primary_subscript | Primary_id) "=" Exp ";"

    IfStmt              = if Exp Block putback Block     --long
                        | if Exp Block putback IfStmt    --elsif
                        | if Exp Block                   --short
    WhileStmt           = while Exp Block
    Block               = "{" Stmt* "}" 
    IncrementStmt       = (Primary_subscript | Primary_id) "++" ";"
    
    
    Type                = Type "[]"                                   --array                 
                        | prim_type
    prim_type           = "number" | "boolean" | "string"
     

    Exp                 = Exp1

    Exp1                = Exp2 ("or" Exp2)+              --or   
                        | Exp2 

    Exp2                = Exp3 ("and" Exp3)+             --and
                        | Exp3

    Exp3                = Condition relop Condition      --test
                        | Condition      

    Condition           = Condition "+" Term             --add
                        | Condition "-" Term             --sub
                        | Term

    Term                = Term "*" Factor                   --mult
                        | Term "/" Factor                   --div
                        | Term "%" Factor                   --mod
                        | Factor

    Factor              = Factor "**" Primary               --exp
                        | "-" Primary                       --neg
                        | Primary

    Primary             = true ~mut
                        | false ~mut
                        | nil  ~"="                         --nil
                        | numeral
                        | stringlit                         --string
                        | id "(" ListOf<Exp, ","> ")"       --call
                        | Primary "[" Exp "]"               --subscript
                        | id                                --id
                        | "[" ListOf<Exp, ","> "]"          --array
                        | "(" Exp ")"                       --parens
    
    mut                 = ~"==" "=" | "++" | "--" | "["
    pick                = "pick" ~idchar       
    const               = "const" ~idchar      
    log                 = "log" ~idchar
    while               = "while" ~idchar
    if                  = "if" ~idchar          
    putback             = "putback" ~idchar      
    break               = "break" ~idchar
    defineplay          = "define play" ~idchar
    dunk                = "dunk" ~idchar // return
    true                = "true" ~idchar    
    false               = "false" ~idchar
    nil                 = "nil" ~idchar
    keyword             = pick | const | log | while | if | putback | break | defineplay | dunk | true | false | nil
    id                  = ~keyword letter idchar*
    idchar              = letter | digit | "_"
    numeral             = digit+ ("." digit+)? (("E" | "e") ("+"|"-")? digit+)?
    stringlit           = "\"" (~"\"" any)* "\""

    relop               = "<=" | "<" | "==" | "!=" | ">=" | ">"

    space               += "#" (~"\n" any)*          --comment
}